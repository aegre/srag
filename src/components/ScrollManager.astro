---
export interface Props {
  sectionIds: string[];
}

const { sectionIds } = Astro.props;
---

<!-- Progress indicator -->
<div class="absolute right-2 top-1/2 transform -translate-y-1/2 space-y-2" aria-hidden="true" id="progress-dots">
  {sectionIds.map((sectionId, index) => (
    <div 
      id={`dot-${index}`} 
      class={`w-2 h-2 rounded-full transition-opacity duration-300 ${
        index === 0 ? 'bg-secondary-light' : 'bg-secondary-light/40'
      }`}
      data-section={sectionId}
    ></div>
  ))}
</div>

<script define:vars={{ sectionIds }}>
  document.addEventListener('DOMContentLoaded', function() {
    const scrollContainer = document.getElementById('scroll-container');
    const totalSections = sectionIds.length;
    const dots = [];
    let sectionElements = [];
    let sectionOffsets = [];
    
    // Get all dots dynamically
    for (let i = 0; i < totalSections; i++) {
      dots.push(document.getElementById(`dot-${i}`));
    }

    // Get all section elements and calculate their offsets
    function calculateSectionOffsets() {
      sectionElements = sectionIds.map(id => document.getElementById(id));
      sectionOffsets = [];
      
      sectionElements.forEach(section => {
        if (section) {
          sectionOffsets.push(section.offsetTop);
        }
      });
    }

    // Find the current section based on scroll position
    function getCurrentSection(scrollTop) {
      let currentSection = 0;
      
      for (let i = sectionOffsets.length - 1; i >= 0; i--) {
        if (scrollTop >= sectionOffsets[i] - 100) { // 100px offset for better UX
          currentSection = i;
          break;
        }
      }
      
      return currentSection;
    }

    function updateProgressDots() {
      const scrollTop = scrollContainer.scrollTop;
      const currentSection = getCurrentSection(scrollTop);
      
      // Update dot opacity based on current section
      dots.forEach((dot, index) => {
        if (index === currentSection) {
          dot.style.opacity = '1';
          dot.classList.remove('bg-secondary-light/40');
          dot.classList.add('bg-secondary-light');
        } else {
          dot.style.opacity = '0.4';
          dot.classList.remove('bg-secondary-light');
          dot.classList.add('bg-secondary-light/40');
        }
      });
    }

    // Initialize after DOM is fully loaded
    setTimeout(() => {
      calculateSectionOffsets();
      updateProgressDots();
    }, 100);

    // Scroll event listener
    scrollContainer.addEventListener('scroll', updateProgressDots);

    // Enhanced wheel event for smooth section transitions
    scrollContainer.addEventListener('wheel', function(e) {
      e.preventDefault();
      const delta = e.deltaY;
      const scrollTop = scrollContainer.scrollTop;
      const currentSection = getCurrentSection(scrollTop);
      
      if (delta > 0 && currentSection < totalSections - 1) {
        // Scroll down to next section
        const nextSection = sectionElements[currentSection + 1];
        if (nextSection) {
          scrollContainer.scrollTo({
            top: nextSection.offsetTop,
            behavior: 'smooth'
          });
        }
      } else if (delta < 0 && currentSection > 0) {
        // Scroll up to previous section
        const prevSection = sectionElements[currentSection - 1];
        if (prevSection) {
          scrollContainer.scrollTo({
            top: prevSection.offsetTop,
            behavior: 'smooth'
          });
        }
      }
    });

    // Click on dots to navigate to sections
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        const targetSection = sectionElements[index];
        if (targetSection) {
          scrollContainer.scrollTo({
            top: targetSection.offsetTop,
            behavior: 'smooth'
          });
        }
      });
      
      // Add cursor pointer for clickable dots
      dot.style.cursor = 'pointer';
    });

    // Recalculate offsets on window resize
    window.addEventListener('resize', () => {
      setTimeout(() => {
        calculateSectionOffsets();
        updateProgressDots();
      }, 100);
    });
  });
</script> 