---
export interface Props {
  sectionIds: string[];
}

const { sectionIds } = Astro.props;
---

<!-- Progress indicator -->
<div class="absolute right-2 top-1/2 transform -translate-y-1/2 space-y-2" aria-hidden="true" id="progress-dots">
  {sectionIds.map((sectionId, index) => (
    <div 
      id={`dot-${index}`} 
      class={`w-2 h-2 rounded-full transition-opacity duration-300 ${
        index === 0 ? 'bg-secondary-light' : 'bg-secondary-light/40'
      }`}
      data-section={sectionId}
    ></div>
  ))}
</div>

<script define:vars={{ sectionIds }}>
  document.addEventListener('DOMContentLoaded', function() {
    const scrollContainer = document.getElementById('scroll-container');
    const totalSections = sectionIds.length;
    const dots = [];
    
    // Get all dots dynamically
    for (let i = 0; i < totalSections; i++) {
      dots.push(document.getElementById(`dot-${i}`));
    }

    function updateProgressDots() {
      const scrollTop = scrollContainer.scrollTop;
      const scrollHeight = scrollContainer.scrollHeight - scrollContainer.clientHeight;
      const scrollPercent = scrollTop / scrollHeight;

      // Calculate which section we're currently viewing
      const sectionHeight = 600; // Each section is 600px
      const currentSection = Math.round(scrollTop / sectionHeight);
      
      // Update dot opacity based on current section
      dots.forEach((dot, index) => {
        if (index === currentSection) {
          dot.style.opacity = '1';
          dot.classList.remove('bg-secondary-light/40');
          dot.classList.add('bg-secondary-light');
        } else {
          dot.style.opacity = '0.4';
          dot.classList.remove('bg-secondary-light');
          dot.classList.add('bg-secondary-light/40');
        }
      });
    }

    // Scroll event listener
    scrollContainer.addEventListener('scroll', updateProgressDots);
    
    // Initialize dots
    updateProgressDots();

    // Enhanced wheel event for smooth section transitions
    scrollContainer.addEventListener('wheel', function(e) {
      e.preventDefault();
      const delta = e.deltaY;
      const sectionHeight = 600;
      const currentSection = Math.round(scrollContainer.scrollTop / sectionHeight);
      
      if (delta > 0 && currentSection < totalSections - 1) {
        // Scroll down to next section
        scrollContainer.scrollTo({
          top: (currentSection + 1) * sectionHeight,
          behavior: 'smooth'
        });
      } else if (delta < 0 && currentSection > 0) {
        // Scroll up to previous section
        scrollContainer.scrollTo({
          top: (currentSection - 1) * sectionHeight,
          behavior: 'smooth'
        });
      }
    });

    // Optional: Click on dots to navigate to sections
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        scrollContainer.scrollTo({
          top: index * 600,
          behavior: 'smooth'
        });
      });
      
      // Add cursor pointer for clickable dots
      dot.style.cursor = 'pointer';
    });
  });
</script> 