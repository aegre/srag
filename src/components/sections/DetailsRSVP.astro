---
import InvitationSection from '../InvitationSection.astro';

export interface Props {
  settings?: any;
  invitation?: any;
}

const { settings, invitation } = Astro.props;

// Use settings if available, otherwise fallback to defaults
const confirmationPhone = settings?.rsvp_phone || "+525555555555";
const whatsappNumber = settings?.rsvp_whatsapp || confirmationPhone;
const deadline = settings?.rsvp_deadline || "1 de Septiembre";
const rsvpEnabled = settings?.rsvp_enabled === 1 || settings?.rsvp_enabled === true;
const whatsappMessage = "¡Hola! Confirmo mi asistencia a los XV años de Julietta el 13 de septiembre.";
const invitationSlug = invitation?.slug;
const invitationId = invitation?.id;
---

<InvitationSection id="section-details-rsvp">
  <div class="relative z-10 space-y-12 text-center">
    <header class="space-y-3">
      <h2 class="font-hero text-2xl tracking-[0.2em] text-secondary-light uppercase font-medium">
        Detalles
      </h2>
      <hr class="w-20 h-px bg-gradient-to-r from-transparent via-secondary-light to-transparent mx-auto border-0" aria-hidden="true" />
    </header>

    <div class="space-y-10">
     

      <!-- RSVP Section -->
      {rsvpEnabled ? (
        <div class="text-center space-y-6">
          <h3 class="font-hero text-lg md:text-xl text-secondary-light font-light mb-4">Confirmar Asistencia</h3>
          
          {deadline && (
            <p class="text-secondary-light font-serif text-sm mb-6">
              Antes del {deadline}
            </p>
          )}

          <!-- RSVP Buttons -->
          <div class="space-y-4 max-w-sm mx-auto">
            <!-- WhatsApp Button -->
            {whatsappNumber && (
              <a 
                href={`https://wa.me/${whatsappNumber.replace('+', '')}?text=${encodeURIComponent(whatsappMessage)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="rsvp-btn flex items-center justify-center space-x-3 w-full px-6 py-3 rounded-full border border-secondary-light/40 text-secondary-light font-hero text-sm font-light transition-all duration-300 hover:border-secondary-light hover:bg-secondary-light/10">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.515"/>
                </svg>
                <span>Confirmar por WhatsApp</span>
              </a>
            )}

            <!-- Phone Button -->
            {confirmationPhone && (
              <a 
                href={`tel:${confirmationPhone}`}
                class="rsvp-btn flex items-center justify-center space-x-3 w-full px-6 py-3 rounded-full border border-secondary-light/40 text-secondary-light font-hero text-sm font-light transition-all duration-300 hover:border-secondary-light hover:bg-secondary-light/10">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                </svg>
                <span>Llamar para confirmar</span>
              </a>
            )}

            <!-- Direct Confirmation Button -->
            {rsvpEnabled && invitationSlug && !invitation?.is_confirmed ? (
              <button 
                id="confirm-btn"
                data-action="confirm"
                class="rsvp-btn flex items-center justify-center space-x-3 w-full px-6 py-3 rounded-full border border-secondary-light/40 text-secondary-light font-hero text-sm font-light transition-all duration-300 hover:border-secondary-light hover:bg-secondary-light/10 disabled:opacity-50 disabled:cursor-not-allowed">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                <span id="confirm-text">Confirmar Asistencia</span>
              </button>
            ) : null}

            <!-- Cancel Confirmation Button -->
            {rsvpEnabled && invitationSlug && invitation?.is_confirmed ? (
              <button 
                id="unconfirm-btn"
                data-action="unconfirm"
                class="rsvp-btn flex items-center justify-center space-x-3 w-full px-6 py-3 rounded-full border border-red-400 text-red-600 font-hero text-sm font-light transition-all duration-300 hover:border-red-600 hover:bg-red-50 disabled:opacity-50 disabled:cursor-not-allowed">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
                <span id="unconfirm-text">Cancelar Confirmación</span>
              </button>
            ) : null}
          </div>
        </div>
      ) : (
        <div class="text-center space-y-6">
          <h3 class="font-hero text-lg md:text-xl text-secondary-light font-light mb-4">Confirmar Asistencia</h3>
          <div class="bg-secondary-light/10 border border-secondary-light/20 rounded-lg p-6">
            <p class="text-secondary-light font-serif text-sm">
              La confirmación de asistencia no está disponible en este momento.
            </p>
          </div>
        </div>
      )}

  <!-- Confirmation JavaScript -->
  <script define:vars={{ invitationSlug, invitationId, rsvpEnabled }}>
    if (invitationSlug && rsvpEnabled) {
      const confirmBtn = document.getElementById('confirm-btn');
      const confirmText = document.getElementById('confirm-text');
      const unconfirmBtn = document.getElementById('unconfirm-btn');
      const unconfirmText = document.getElementById('unconfirm-text');
      
      // Handle confirmation action
      if (confirmBtn && confirmText) {
        confirmBtn.addEventListener('click', async () => {
          await handleConfirmationAction('confirm', confirmBtn, confirmText);
        });
      }
      
      // Handle unconfirmation action
      if (unconfirmBtn && unconfirmText) {
        unconfirmBtn.addEventListener('click', async () => {
          await handleConfirmationAction('unconfirm', unconfirmBtn, unconfirmText);
        });
      }
      
      async function handleConfirmationAction(action, button, textElement) {
        try {

          // Disable button and show loading
          button.disabled = true;
          const loadingText = action === 'confirm' ? 'Confirmando...' : 'Cancelando...';
          textElement.textContent = loadingText;
          
          const response = await fetch('/api/invitations/confirm', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ slug: invitationSlug, action })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Send analytics event for successful action
            try {
              await fetch('/api/analytics', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  event_type: 'rsvp_action_success',
                  invitation_id: invitationId,
                  slug: invitationSlug,
                  event_data: {
                    action: action,
                    slug: invitationSlug,
                    button_type: action === 'confirm' ? 'confirm' : 'cancel',
                    success: true,
                    timestamp: new Date().toISOString()
                  }
                })
              });
            } catch (analyticsError) {
              console.error('Error sending success analytics:', analyticsError);
              // Don't fail the main action if analytics fails
            }

            // Show success state
            const successText = action === 'confirm' ? '¡Confirmado!' : '¡Cancelado!';
            textElement.textContent = successText;
            
            if (action === 'confirm') {
              button.classList.add('bg-green-600', 'border-green-600', 'text-white');
              button.classList.remove('border-secondary-light/40', 'text-secondary-light', 'hover:border-secondary-light', 'hover:bg-secondary-light/10');
            } else {
              button.classList.add('bg-red-600', 'border-red-600', 'text-white');
              button.classList.remove('border-red-400', 'text-red-600', 'hover:border-red-600', 'hover:bg-red-50');
            }
            
            // Show success state for 3 seconds, then update button state
            setTimeout(() => {
              if (action === 'confirm') {
                // Replace confirm button with cancel button
                const buttonContainer = button.parentNode;
                const originalHTML = buttonContainer.innerHTML;
                
                // Find and replace only the confirm button
                const confirmButtonHTML = `
                  <button 
                    id="unconfirm-btn"
                    data-action="unconfirm"
                    class="rsvp-btn flex items-center justify-center space-x-3 w-full px-6 py-3 rounded-full border border-red-400 text-red-600 font-hero text-sm font-light transition-all duration-300 hover:border-red-600 hover:bg-red-50 disabled:opacity-50 disabled:cursor-not-allowed">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                    <span id="unconfirm-text">Cancelar Confirmación</span>
                  </button>
                `;
                
                // Replace only the confirm button, keeping other buttons intact
                buttonContainer.innerHTML = originalHTML.replace(
                  /<button[^>]*id="confirm-btn"[^>]*>[\s\S]*?<\/button>/,
                  confirmButtonHTML
                );
                
                // Add event listener to new button
                const newUnconfirmBtn = buttonContainer.querySelector('#unconfirm-btn');
                const newUnconfirmText = buttonContainer.querySelector('#unconfirm-text');
                if (newUnconfirmBtn && newUnconfirmText) {
                  newUnconfirmBtn.addEventListener('click', async () => {
                    await handleConfirmationAction('unconfirm', newUnconfirmBtn, newUnconfirmText);
                  });
                }
              } else {
                // Replace cancel button with confirm button
                const buttonContainer = button.parentNode;
                const originalHTML = buttonContainer.innerHTML;
                
                // Find and replace only the cancel button
                const cancelButtonHTML = `
                  <button 
                    id="confirm-btn"
                    data-action="confirm"
                    class="rsvp-btn flex items-center justify-center space-x-3 w-full px-6 py-3 rounded-full border border-secondary-light/40 text-secondary-light font-hero text-sm font-light transition-all duration-300 hover:border-secondary-light hover:bg-secondary-light/10 disabled:opacity-50 disabled:cursor-not-allowed">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                    <span id="confirm-text">Confirmar Asistencia</span>
                  </button>
                `;
                
                // Replace only the cancel button, keeping other buttons intact
                buttonContainer.innerHTML = originalHTML.replace(
                  /<button[^>]*id="unconfirm-btn"[^>]*>[\s\S]*?<\/button>/,
                  cancelButtonHTML
                );
                
                // Add event listener to new button
                const newConfirmBtn = buttonContainer.querySelector('#confirm-btn');
                const newConfirmText = buttonContainer.querySelector('#confirm-text');
                if (newConfirmBtn && newConfirmText) {
                  newConfirmBtn.addEventListener('click', async () => {
                    await handleConfirmationAction('confirm', newConfirmBtn, newConfirmText);
                  });
                }
              }
            }, 3000);
          } else {

            // Show error state
            textElement.textContent = 'Error - Intentar de nuevo';
            button.classList.add('bg-red-600', 'border-red-600', 'text-white');
            button.classList.remove('border-secondary-light/40', 'text-secondary-light', 'hover:border-secondary-light', 'hover:bg-secondary-light/10', 'border-red-400', 'text-red-600', 'hover:border-red-600', 'hover:bg-red-50');
            
            // Re-enable button after 3 seconds
            setTimeout(() => {
              button.disabled = false;
              const originalText = action === 'confirm' ? 'Confirmar Asistencia' : 'Cancelar Confirmación';
              textElement.textContent = originalText;
              button.classList.remove('bg-red-600', 'border-red-600', 'text-white');
              
              if (action === 'confirm') {
                button.classList.add('border-secondary-light/40', 'text-secondary-light', 'hover:border-secondary-light', 'hover:bg-secondary-light/10');
              } else {
                button.classList.add('border-red-400', 'text-red-600', 'hover:border-red-600', 'hover:bg-red-50');
              }
            }, 3000);
          }
          
        } catch (error) {
          console.error(`Error ${action}ing invitation:`, error);
          
          
          // Show error state
          textElement.textContent = 'Error - Intentar de nuevo';
          button.classList.add('bg-red-600', 'border-red-600', 'text-white');
          button.classList.remove('border-secondary-light/40', 'text-secondary-light', 'hover:border-secondary-light', 'hover:bg-secondary-light/10', 'border-red-400', 'text-red-600', 'hover:border-red-600', 'hover:bg-red-50');
          
          // Re-enable button after 3 seconds
          setTimeout(() => {
            button.disabled = false;
            const originalText = action === 'confirm' ? 'Confirmar Asistencia' : 'Cancelar Confirmación';
            textElement.textContent = originalText;
            button.classList.remove('bg-red-600', 'border-red-600', 'text-white');
            
            if (action === 'confirm') {
              button.classList.add('border-secondary-light/40', 'text-secondary-light', 'hover:border-secondary-light', 'hover:bg-secondary-light/10');
            } else {
              button.classList.add('border-red-400', 'text-red-600', 'hover:border-red-600', 'hover:bg-red-50');
            }
          }, 3000);
        }
      }
    }
  </script>

      <!-- Personal Message -->
      <footer class="text-center pt-6">
        <blockquote class="text-secondary-light font-serif text-sm italic leading-relaxed max-w-lg mx-auto">
          "Te espero para celebrar juntos<br/>este momento tan especial"
        </blockquote>
      </footer>
    </div>
  </div>
</InvitationSection>

<style>
  .rsvp-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  .rsvp-btn:active {
    transform: translateY(0);
  }
</style> 